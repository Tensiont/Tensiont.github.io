<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>xv6_lab3_pagetable</title>
    <link href="/2024/02/05/xv6-lab3-pagetable/"/>
    <url>/2024/02/05/xv6-lab3-pagetable/</url>
    
    <content type="html"><![CDATA[<h1 id="xv6-lab3-page-tables"><a href="#xv6-lab3-page-tables" class="headerlink" title="xv6 lab3 page tables"></a>xv6 lab3 page tables</h1><p>本实验探索了xv6的页表结构，并且为每个进程都添加了一个独立的内核页表，并将用户页表的程序段 (0到PLIC) 同步映射至各自的内核页表，使内核可以直接解引用用户传递的指针。</p><h2 id="Print-a-easy-table"><a href="#Print-a-easy-table" class="headerlink" title="Print a easy table"></a>Print a easy table</h2><p>添加一个打印页表的内核函数，打印传入的页表，pte(Page Table Entries) 代表页表项的虚拟地址，pa(Physical Address) 指页表项指向的物理地址。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">page table 0x0000000087f6e000<br><span class="hljs-string">..0</span>: pte 0x0000000021fda801 pa 0x0000000087f6a000<br><span class="hljs-string">..</span> <span class="hljs-string">..0</span>: pte 0x0000000021fda401 pa 0x0000000087f69000<br><span class="hljs-string">..</span> <span class="hljs-string">..</span> <span class="hljs-string">..0</span>: pte 0x0000000021fdac1f pa 0x0000000087f6b000<br><span class="hljs-string">..</span> <span class="hljs-string">..</span> <span class="hljs-string">..1</span>: pte 0x0000000021fda00f pa 0x0000000087f68000<br><span class="hljs-string">..</span> <span class="hljs-string">..</span> <span class="hljs-string">..2</span>: pte 0x0000000021fd9c1f pa 0x0000000087f67000<br><span class="hljs-string">..255</span>: pte 0x0000000021fdb401 pa 0x0000000087f6d000<br><span class="hljs-string">..</span> <span class="hljs-string">..511</span>: pte 0x0000000021fdb001 pa 0x0000000087f6c000<br><span class="hljs-string">..</span> <span class="hljs-string">..</span> <span class="hljs-string">..510</span>: pte 0x0000000021fdd807 pa 0x0000000087f76000<br><span class="hljs-string">..</span> <span class="hljs-string">..</span> <span class="hljs-string">..511</span>: pte 0x0000000020001c0b pa 0x0000000080007000<br></code></pre></td></tr></table></figure><p>RISC-V 的逻辑地址寻址是采用三级页表的形式，9 bit 一级索引找到二级页表，9 bit 二级索引找到三级页表，9 bit 三级索引找到内存页，最低 12 bit 为页内偏移（即一个页 4096 bytes）。</p><p><strong>实现步骤</strong></p><p>1.本实验需要在 <code>vm.c</code> 中实现 <code>vmprint()</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>_vmprint(<span class="hljs-type">pagetable_t</span> pagetable,<span class="hljs-type">int</span> level)&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">512</span>;i++)&#123;<br>    <span class="hljs-type">pte_t</span> pte=pagetable[i];<br>    <span class="hljs-keyword">if</span>(pte&amp;PTE_V)&#123;<span class="hljs-comment">//页表项有效</span><br>      uint64 child = PTE2PA(pte);<br>      <br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;level;j++)&#123;<br>        <span class="hljs-keyword">if</span>(j==level<span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;..&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.. &quot;</span>);<br>      &#125;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: pte %p pa %p\n&quot;</span>,i,pte,child);<br>      <span class="hljs-keyword">if</span>((pte&amp;(PTE_R|PTE_W|PTE_X))==<span class="hljs-number">0</span>)<span class="hljs-comment">//非叶节点</span><br>          _vmprint((<span class="hljs-type">pagetable_t</span>)child,level+<span class="hljs-number">1</span>);<span class="hljs-comment">//递归</span><br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-type">void</span><br><span class="hljs-title function_">vmprint</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable)</span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;page table %p\n&quot;</span>,pagetable);<br>  _vmprint(pagetable,<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在 <code>kernel/defs.h</code> 中添加该函数声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/defs.h</span><br><span class="hljs-comment">//...</span><br><span class="hljs-type">int</span>             <span class="hljs-title function_">copyout</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span>, uint64, <span class="hljs-type">char</span> *, uint64)</span>;<br><span class="hljs-type">int</span>             <span class="hljs-title function_">copyin</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span>, <span class="hljs-type">char</span> *, uint64, uint64)</span>;<br><span class="hljs-type">int</span>             <span class="hljs-title function_">copyinstr</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span>, <span class="hljs-type">char</span> *, uint64, uint64)</span>;<br><span class="hljs-type">int</span>             <span class="hljs-title function_">vmprint</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable)</span>; <span class="hljs-comment">// 添加函数声明</span><br></code></pre></td></tr></table></figure><p>3.按照要求在 <code>exec()</code> 函数中调用 <code>vmprint()</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//exec.c</span><br><span class="hljs-type">int</span><br><span class="hljs-title function_">exec</span><span class="hljs-params">(<span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-keyword">if</span>(p-&gt;pid==<span class="hljs-number">1</span>) vmprint(p-&gt;pagetable);<br><br>  <span class="hljs-keyword">return</span> argc; <span class="hljs-comment">// this ends up in a0, the first argument to main(argc, argv)</span><br><br> bad:<br>  <span class="hljs-keyword">if</span>(pagetable)<br>    proc_freepagetable(pagetable, sz);<br>  <span class="hljs-keyword">if</span>(ip)&#123;<br>    iunlockput(ip);<br>    end_op();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="A-kernel-page-table-per-process"><a href="#A-kernel-page-table-per-process" class="headerlink" title="A kernel page table per process"></a>A kernel page table per process</h2><p>xv6 原本的设计是，用户进程在用户态使用各自的用户态页表，但是一旦进入内核态（例如使用了系统调用），则切换到内核页表（通过修改 satp 寄存器，trampoline.S）。然而这个内核页表是全局共享的，也就是全部进程进入内核态都共用同一个内核态页表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// vm.c</span><br><span class="hljs-type">pagetable_t</span> kernel_pagetable; <span class="hljs-comment">// 全局变量，共享的内核页表</span><br></code></pre></td></tr></table></figure><p>本 Lab 目标是让每一个进程进入内核态后，都能有自己的独立<strong>内核页表</strong>，为第三个实验做准备。</p><p><strong>实现步骤</strong></p><p>1.先给 <code>proc</code> 结构体添加一个 <code>kernelpt</code>，用于存储进程专享的内核态页表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//kernel/proc.h</span><br><span class="hljs-comment">// Per-process state</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> &#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spinlock</span> <span class="hljs-title">lock</span>;</span><br><br>  <span class="hljs-comment">// p-&gt;lock must be held when using these:</span><br>  <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">procstate</span> <span class="hljs-title">state</span>;</span>        <span class="hljs-comment">// Process state</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">parent</span>;</span>         <span class="hljs-comment">// Parent process</span><br>  <span class="hljs-type">void</span> *chan;                  <span class="hljs-comment">// If non-zero, sleeping on chan</span><br>  <span class="hljs-type">int</span> killed;                  <span class="hljs-comment">// If non-zero, have been killed</span><br>  <span class="hljs-type">int</span> xstate;                  <span class="hljs-comment">// Exit status to be returned to parent&#x27;s wait</span><br>  <span class="hljs-type">int</span> pid;                     <span class="hljs-comment">// Process ID</span><br><br>  <span class="hljs-comment">// these are private to the process, so p-&gt;lock need not be held.</span><br>  uint64 kstack;               <span class="hljs-comment">// Virtual address of kernel stack</span><br>  uint64 sz;                   <span class="hljs-comment">// Size of process memory (bytes)</span><br>  <span class="hljs-type">pagetable_t</span> pagetable;       <span class="hljs-comment">// User page table</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trapframe</span> *<span class="hljs-title">trapframe</span>;</span> <span class="hljs-comment">// data page for trampoline.S</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">context</span> <span class="hljs-title">context</span>;</span>      <span class="hljs-comment">// swtch() here to run process</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">ofile</span>[<span class="hljs-title">NOFILE</span>];</span>  <span class="hljs-comment">// Open files</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">cwd</span>;</span>           <span class="hljs-comment">// Current directory</span><br>  <span class="hljs-type">char</span> name[<span class="hljs-number">16</span>];               <span class="hljs-comment">// Process name (debugging)</span><br><br>  <span class="hljs-type">pagetable_t</span> kernelpt;        <span class="hljs-comment">//新增页表</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>2.实现一个初始化进程内核页表的函数，模仿 <code>kvminit()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//kernel/vm.c</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">uvmmap</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> kernelpt,uint64 va,uint64 pa,uint64 sz,<span class="hljs-type">int</span> perm)</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(mappages(kernelpt, va, sz, pa, perm) != <span class="hljs-number">0</span>)<br>    panic(<span class="hljs-string">&quot;uvmmap&quot;</span>);<br>&#125;<br><br><span class="hljs-type">pagetable_t</span><br><span class="hljs-title function_">proc_kpt_init</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">pagetable_t</span> kernelpt = uvmcreate();<br>  <span class="hljs-keyword">if</span> (kernelpt == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  uvmmap(kernelpt, UART0, UART0, PGSIZE, PTE_R | PTE_W);<br>  uvmmap(kernelpt, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);<br>  uvmmap(kernelpt, CLINT, CLINT, <span class="hljs-number">0x10000</span>, PTE_R | PTE_W);<br>  uvmmap(kernelpt, PLIC, PLIC, <span class="hljs-number">0x400000</span>, PTE_R | PTE_W);<br>  uvmmap(kernelpt, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);<br>  uvmmap(kernelpt, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);<br>  uvmmap(kernelpt, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);<br>  <span class="hljs-keyword">return</span> kernelpt;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在可以创建进程间相互独立的内核页表了，但是还有一个东西需要处理：内核栈。 原本的 xv6 设计中，所有处于内核态的进程都共享同一个页表，即意味着共享同一个地址空间。由于 xv6 支持多核&#x2F;多进程调度，同一时间可能会有多个进程处于内核态，所以需要对所有处于内核态的进程创建其独立的内核态内的栈，也就是内核栈，供给其内核态代码执行过程。</p><p>xv6 在启动过程中，会在 procinit() 中为所有可能的 64 个进程位都预分配好内核栈 kstack，具体为在高地址空间里，每个进程使用一个页作为 kstack，并且两个不同 kstack 中间隔着一个无映射的 guard page 用于检测栈溢出错误。</p><p>在 xv6 原来的设计中，内核页表本来是只有一个的，所有进程共用，所以需要为不同进程创建多个内核栈，并 map 到不同位置。</p><p>而我们的新设计中，每一个进程都会有自己独立的内核页表，并且每个进程也只需要访问自己的内核栈，而不需要能够访问所有 64 个进程的内核栈。</p><p>3.每个进程改为在创建时分配内核栈，内核栈位于各自的内核页表中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//kernel/proc.c</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">procinit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span>;</span><br>  <br>  initlock(&amp;pid_lock, <span class="hljs-string">&quot;nextpid&quot;</span>);<br>  <span class="hljs-keyword">for</span>(p = proc; p &lt; &amp;proc[NPROC]; p++) &#123;<br>      initlock(&amp;p-&gt;lock, <span class="hljs-string">&quot;proc&quot;</span>);<br>      <span class="hljs-comment">//这里删除了为进程预分配内核栈的代码</span><br>      <span class="hljs-comment">//变为创建进程时再创建</span><br>      <span class="hljs-comment">//见allocproc()</span><br>  &#125;<br>  kvminithart();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> proc*<br><span class="hljs-title function_">allocproc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span>;</span><br><br>  <span class="hljs-keyword">for</span>(p = proc; p &lt; &amp;proc[NPROC]; p++) &#123;<br>    acquire(&amp;p-&gt;lock);<br>    <span class="hljs-keyword">if</span>(p-&gt;state == UNUSED) &#123;<br>      <span class="hljs-keyword">goto</span> found;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      release(&amp;p-&gt;lock);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>found:<br>  p-&gt;pid = allocpid();<br>  <span class="hljs-comment">//...</span><br><br>  <span class="hljs-comment">// An empty user page table.</span><br>  p-&gt;pagetable = proc_pagetable(p);<br>  <span class="hljs-keyword">if</span>(p-&gt;pagetable == <span class="hljs-number">0</span>)&#123;<br>    freeproc(p);<br>    release(&amp;p-&gt;lock);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>  p-&gt;kernelpt=proc_kpt_init();<br>  <span class="hljs-keyword">if</span>(p-&gt;kernelpt==<span class="hljs-number">0</span>)&#123;<br>    freeproc(p);<br>    release(&amp;p-&gt;lock);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <br>  <span class="hljs-comment">//分配内核栈</span><br>  <span class="hljs-type">char</span> *pa = kalloc();<br>  <span class="hljs-keyword">if</span>(pa == <span class="hljs-number">0</span>)<br>    panic(<span class="hljs-string">&quot;kalloc&quot;</span>);<br>  uint64 va = KSTACK((<span class="hljs-type">int</span>) (p - proc));<br>  uvmmap(p-&gt;kernelpt,va, (uint64)pa, PGSIZE, PTE_R | PTE_W);<br>  p-&gt;kstack = va;<br><br>  <span class="hljs-comment">//...</span><br><br>  <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里进程独立的内核页表就创建完成了，但是目前只是创建而已，用户进程进入内核态后依然会使用全局共享的内核页表，因此还需要在 <code>scheduler()</code> 中进行相关修改。</p><p>4.在调度器将 CPU 交给进程执行之前，切换到该进程对应的内核页表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//kernel/vm.c</span><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">proc_inithart</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> kpt)</span>&#123;<br>  w_satp(MAKE_SATP(kpt)); <span class="hljs-comment">//切换到进程独立的内核页表</span><br>  sfence_vma();  <span class="hljs-comment">//清除快表缓存</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">scheduler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cpu</span> *<span class="hljs-title">c</span> =</span> mycpu();<br>  <br>  c-&gt;proc = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(;;)&#123;<br>    <span class="hljs-comment">// Avoid deadlock by ensuring that devices can interrupt.</span><br>    intr_on();<br>    <br>    <span class="hljs-type">int</span> found = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(p = proc; p &lt; &amp;proc[NPROC]; p++) &#123;<br>      acquire(&amp;p-&gt;lock);<br>      <span class="hljs-keyword">if</span>(p-&gt;state == RUNNABLE) &#123;<br>        <span class="hljs-comment">// Switch to chosen process.  It is the process&#x27;s job</span><br>        <span class="hljs-comment">// to release its lock and then reacquire it</span><br>        <span class="hljs-comment">// before jumping back to us.</span><br>        p-&gt;state = RUNNING;<br>        c-&gt;proc = p;<br>        <br>        proc_inithart(p-&gt;kernelpt); <span class="hljs-comment">//切换至进程独立的内核页表</span><br><br>        swtch(&amp;c-&gt;context, &amp;p-&gt;context);  <span class="hljs-comment">//调度，执行进程</span><br><br>        kvminithart();  <span class="hljs-comment">//切换回全局内核页表</span><br><br>        <span class="hljs-comment">// Process is done running for now.</span><br>        <span class="hljs-comment">// It should have changed its p-&gt;state before coming back.</span><br>        c-&gt;proc = <span class="hljs-number">0</span>;<br><br>        found = <span class="hljs-number">1</span>;<br>      &#125;<br>      release(&amp;p-&gt;lock);<br>    &#125;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>5.最后一步，释放进程内核页表。</p><h2 id="Simplify-copyin-copyinstr"><a href="#Simplify-copyin-copyinstr" class="headerlink" title="Simplify copyin&#x2F;copyinstr"></a>Simplify copyin&#x2F;copyinstr</h2><p>在上一个实验中，已经使得每一个进程都拥有独立的内核态页表了，这个实验的目标是，在进程的内核态页表中维护一个用户态页表映射的副本，这样使得内核态也可以对用户态传进来的指针（逻辑地址）进行解引用。</p><p>这样做相比原来 copyin 的实现的优势是，原来的 copyin 是通过软件模拟访问页表的过程获取物理地址的，而在内核页表内维护映射副本的话，可以利用 CPU 的硬件寻址功能进行寻址，效率更高并且可以受快表加速。</p><p>要实现这样的效果，我们需要在每一处内核对用户页表进行修改的时候，将同样的修改也同步应用在进程的内核页表上，使得两个页表的程序段（0 到 PLIC 段）地址空间的映射同步。</p><p><strong>实现步骤</strong></p><p>1.替换 copyin、copystr 的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//kernel/vm.c</span><br><span class="hljs-type">int</span><br><span class="hljs-title function_">copyin</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable, <span class="hljs-type">char</span> *dst, uint64 srcva, uint64 len)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> copyin_new(pagetable,dst,srcva,len);<br>  <span class="hljs-comment">// uint64 n, va0, pa0;</span><br><br>  <span class="hljs-comment">// while(len &gt; 0)&#123;</span><br>  <span class="hljs-comment">//   va0 = PGROUNDDOWN(srcva);</span><br>  <span class="hljs-comment">//   pa0 = walkaddr(pagetable, va0);</span><br>  <span class="hljs-comment">//   if(pa0 == 0)</span><br>  <span class="hljs-comment">//     return -1;</span><br>  <span class="hljs-comment">//   n = PGSIZE - (srcva - va0);</span><br>  <span class="hljs-comment">//   if(n &gt; len)</span><br>  <span class="hljs-comment">//     n = len;</span><br>  <span class="hljs-comment">//   memmove(dst, (void *)(pa0 + (srcva - va0)), n);</span><br><br>  <span class="hljs-comment">//   len -= n;</span><br>  <span class="hljs-comment">//   dst += n;</span><br>  <span class="hljs-comment">//   srcva = va0 + PGSIZE;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// return 0;</span><br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">copyinstr</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable, <span class="hljs-type">char</span> *dst, uint64 srcva, uint64 max)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> copyinstr_new(pagetable,dst,srcva,max);<br>  <span class="hljs-comment">// uint64 n, va0, pa0;</span><br>  <span class="hljs-comment">// int got_null = 0;</span><br><br>  <span class="hljs-comment">// while(got_null == 0 &amp;&amp; max &gt; 0)&#123;</span><br>  <span class="hljs-comment">//   va0 = PGROUNDDOWN(srcva);</span><br>  <span class="hljs-comment">//   pa0 = walkaddr(pagetable, va0);</span><br>  <span class="hljs-comment">//   if(pa0 == 0)</span><br>  <span class="hljs-comment">//     return -1;</span><br>  <span class="hljs-comment">//   n = PGSIZE - (srcva - va0);</span><br>  <span class="hljs-comment">//   if(n &gt; max)</span><br>  <span class="hljs-comment">//     n = max;</span><br><br>  <span class="hljs-comment">//   char *p = (char *) (pa0 + (srcva - va0));</span><br>  <span class="hljs-comment">//   while(n &gt; 0)&#123;</span><br>  <span class="hljs-comment">//     if(*p == &#x27;\0&#x27;)&#123;</span><br>  <span class="hljs-comment">//       *dst = &#x27;\0&#x27;;</span><br>  <span class="hljs-comment">//       got_null = 1;</span><br>  <span class="hljs-comment">//       break;</span><br>  <span class="hljs-comment">//     &#125; else &#123;</span><br>  <span class="hljs-comment">//       *dst = *p;</span><br>  <span class="hljs-comment">//     &#125;</span><br>  <span class="hljs-comment">//     --n;</span><br>  <span class="hljs-comment">//     --max;</span><br>  <span class="hljs-comment">//     p++;</span><br>  <span class="hljs-comment">//     dst++;</span><br>  <span class="hljs-comment">//   &#125;</span><br><br>  <span class="hljs-comment">//   srcva = va0 + PGSIZE;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// if(got_null)&#123;</span><br>  <span class="hljs-comment">//   return 0;</span><br>  <span class="hljs-comment">// &#125; else &#123;</span><br>  <span class="hljs-comment">//   return -1;</span><br>  <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-comment">//kernel/vmcopyin.c</span><br><span class="hljs-type">int</span><br><span class="hljs-title function_">copyin_new</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable, <span class="hljs-type">char</span> *dst, uint64 srcva, uint64 len)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br><br>  <span class="hljs-keyword">if</span> (srcva &gt;= p-&gt;sz || srcva+len &gt;= p-&gt;sz || srcva+len &lt; srcva)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  memmove((<span class="hljs-type">void</span> *) dst, (<span class="hljs-type">void</span> *)srcva, len);<br>  stats.ncopyin++;   <span class="hljs-comment">// XXX lock</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">copyinstr_new</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable, <span class="hljs-type">char</span> *dst, uint64 srcva, uint64 max)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  <span class="hljs-type">char</span> *s = (<span class="hljs-type">char</span> *) srcva;<br>  <br>  stats.ncopyinstr++;   <span class="hljs-comment">// XXX lock</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max &amp;&amp; srcva + i &lt; p-&gt;sz; i++)&#123;<br>    dst[i] = s[i];<br>    <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时运行一定会报错，因为内核页表没有拿到用户页表的映射副本，无法对逻辑地址直接解引用。</p><p>2.实现一个 <code>u2kvmcopy()</code> 函数，用于拷贝用户页表到内核页表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">u2kvmcopy</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable,<span class="hljs-type">pagetable_t</span> kernelpt,uint64 oldsz,uint64 newsz)</span>&#123;<br>  <span class="hljs-type">pte_t</span> *pte_to,*pte_from;<br>  oldsz=PGROUNDUP(oldsz);<br>  <span class="hljs-keyword">for</span>(uint64 i=oldsz;i&lt;newsz;i+=PGSIZE)&#123;<br>    <span class="hljs-keyword">if</span>((pte_from=walk(pagetable,i,<span class="hljs-number">0</span>))==<span class="hljs-number">0</span>)&#123;<br>      panic(<span class="hljs-string">&quot;u2kvmcopy: src pte not exist&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>((pte_to=walk(kernelpt,i,<span class="hljs-number">1</span>))==<span class="hljs-number">0</span>)&#123;<br>      panic(<span class="hljs-string">&quot;u2kvmcopy: dst pte not exist&quot;</span>);<br>    &#125;<br>    uint64 flag=PTE_FLAGS(*pte_from)&amp;(~PTE_U);  <span class="hljs-comment">//如果PTE_U位是1，内核态无法访问</span><br>    uint64 pa=PTE2PA(*pte_from); <br>    *pte_to=PA2PTE(pa)|flag;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.同步映射用户页表和内核页表，要修改：<code>fork()</code>,<code>exec()</code>,<code>growproc()</code>,<code>userinit()</code>。在这些函数改变用户页表时，要用 <code>u2kvmcopy()</code> 拷贝至内核页表。还要注意，在 <code>growproc()</code> 中要防止用户进程增长超过 <code>PLIC</code> 的地址。</p><p>4.至此，内核已经可以直接解引用用户指针了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>xv6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell_01</title>
    <link href="/2023/12/08/shell-01/"/>
    <url>/2023/12/08/shell-01/</url>
    
    <content type="html"><![CDATA[<h1 id="shell-01"><a href="#shell-01" class="headerlink" title="shell 01"></a>shell 01</h1><h2 id="初识-shell"><a href="#初识-shell" class="headerlink" title="初识 shell"></a>初识 shell</h2><p>shell 的翻译是贝壳，其作用是解释执行用户输入的命令或程序。</p><img src="/2023/12/08/shell-01/1.jpg" class=""><p>shell 是一块包裹着系统核心的壳，处于操作系统的最外层，与用户直接对话，把用户的输入，解释给操作系统，然后处理操作系统的输出结果，输出到屏幕给与用户看到结果。</p><p>从我们登录 Linux，输入账号密码到进入 Linux 交互式界面，所有的操作，都是交给 shell 解释并执行。</p><h2 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h2><p>当命令或者程序语句写在文件中，我们执行文件，读取其中的代码，这个程序文件就称之为 shell 脚本。</p><p>在 shell 脚本里定义多条 Linux 命令以及循环控制语句，然后将这些 Linux 命令一次性执行完，这种方式称为非交互式方式。</p><ul><li>Windows 中存在  <code>*.bat</code> 批处理脚本</li><li>Linux 中常用 <code>*.sh</code> 脚本文件</li></ul><p>在 Linux 系统中，shell 脚本 (bash shell 程序) 通常都是 vim 编辑，由 Linux 命令、bash shell 指令、逻辑控制语句和注释信息组成。</p><h2 id="shebang"><a href="#shebang" class="headerlink" title="shebang"></a>shebang</h2><p>计算机程序中，shebang 指的是出现在文本文件的第一行的前两个字符 <code>#!</code></p><p>在 Unix 系统中，程序会分析 <code>shebang</code> 后面的内容，作为解释器的指令，例如：</p><ul><li>以 <code>#!/bin/sh</code> 开头的文件，程序在执行的时候会调用 &#x2F;bin&#x2F;sh ，也就是bash解释器</li><li>以 <code>#!/usr/bin/python</code> 开头的文件，代表指定python解释器去执行</li></ul><p>注意事项：</p><ul><li>如果脚本未指定 shebang ，脚本执行的时候，默认用当前shell去解释脚本，即 $SHELL</li><li>如果 <code>#!</code> 指定的解释程序没有执行权限，则会报 “bad interpreter:Permission denied” 错误 (在Linux中，文件名白色为普通文本，绿色为可执行文件)</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/sh</span><br><br>echo &quot;我是shell脚本的一行代码&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x hello.sh #添加可执行权限<br>./hello.sh<br></code></pre></td></tr></table></figure><h2 id="父子-shell"><a href="#父子-shell" class="headerlink" title="父子 shell"></a>父子 shell</h2><p>父子 shell 的作用域不同，拿到不同的变量值。</p><ul><li>每次调用 base&#x2F;sh 解释器执行脚本，都会开启一个子 shell，因此不影响当前 shell 变量</li><li>调用 source 或者点符号，在当前 shell 环境加载脚本，因此影响当前变量</li></ul><p>开启子 shell 的方式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>echo <span class="hljs-variable">$name</span><br>ten<br>tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>cat make_vars.sh<br>name=<span class="hljs-string">&quot;feng&quot;</span><br>tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>./make_vars.sh<br>tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>echo <span class="hljs-variable">$name</span><br>ten<br></code></pre></td></tr></table></figure><p>不开启子 shell：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>source make_vars.sh<br>tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>echo <span class="hljs-variable">$name</span><br>feng<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
