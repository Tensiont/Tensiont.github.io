<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>shell_01</title>
    <link href="/2023/12/08/shell-01/"/>
    <url>/2023/12/08/shell-01/</url>
    
    <content type="html"><![CDATA[<h1 id="shell-01"><a href="#shell-01" class="headerlink" title="shell 01"></a>shell 01</h1><h2 id="初识-shell"><a href="#初识-shell" class="headerlink" title="初识 shell"></a>初识 shell</h2><p>shell 的翻译是贝壳，其作用是解释执行用户输入的命令或程序。</p><img src="/2023/12/08/shell-01/1.jpg" class=""><p>shell 是一块包裹着系统核心的壳，处于操作系统的最外层，与用户直接对话，把用户的输入，解释给操作系统，然后处理操作系统的输出结果，输出到屏幕给与用户看到结果。</p><p>从我们登录 Linux，输入账号密码到进入 Linux 交互式界面，所有的操作，都是交给 shell 解释并执行。</p><h2 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h2><p>当命令或者程序语句写在文件中，我们执行文件，读取其中的代码，这个程序文件就称之为 shell 脚本。</p><p>在 shell 脚本里定义多条 Linux 命令以及循环控制语句，然后将这些 Linux 命令一次性执行完，这种方式称为非交互式方式。</p><ul><li>Windows 中存在  <code>*.bat</code> 批处理脚本</li><li>Linux 中常用 <code>*.sh</code> 脚本文件</li></ul><p>在 Linux 系统中，shell 脚本 (bash shell 程序) 通常都是 vim 编辑，由 Linux 命令、bash shell 指令、逻辑控制语句和注释信息组成。</p><h2 id="shebang"><a href="#shebang" class="headerlink" title="shebang"></a>shebang</h2><p>计算机程序中，shebang 指的是出现在文本文件的第一行的前两个字符 <code>#!</code></p><p>在 Unix 系统中，程序会分析 <code>shebang</code> 后面的内容，作为解释器的指令，例如：</p><ul><li>以 <code>#!/bin/sh</code> 开头的文件，程序在执行的时候会调用 &#x2F;bin&#x2F;sh ，也就是bash解释器</li><li>以 <code>#!/usr/bin/python</code> 开头的文件，代表指定python解释器去执行</li></ul><p>注意事项：</p><ul><li>如果脚本未指定 shebang ，脚本执行的时候，默认用当前shell去解释脚本，即 $SHELL</li><li>如果 <code>#!</code> 指定的解释程序没有执行权限，则会报 “bad interpreter:Permission denied” 错误 (在Linux中，文件名白色为普通文本，绿色为可执行文件)</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/sh</span><br><br>echo &quot;我是shell脚本的一行代码&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x hello.sh #添加可执行权限<br>./hello.sh<br></code></pre></td></tr></table></figure><h2 id="父子-shell"><a href="#父子-shell" class="headerlink" title="父子 shell"></a>父子 shell</h2><p>父子 shell 的作用域不同，拿到不同的变量值。</p><ul><li>每次调用 base&#x2F;sh 解释器执行脚本，都会开启一个子 shell，因此不影响当前 shell 变量</li><li>调用 source 或者点符号，在当前 shell 环境加载脚本，因此影响当前变量</li></ul><p>开启子 shell 的方式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>echo <span class="hljs-variable">$name</span><br>ten<br>tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>cat make_vars.sh<br>name=<span class="hljs-string">&quot;feng&quot;</span><br>tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>./make_vars.sh<br>tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>echo <span class="hljs-variable">$name</span><br>ten<br></code></pre></td></tr></table></figure><p>不开启子 shell：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>source make_vars.sh<br>tension<span class="hljs-variable">@tension</span>-virtual-<span class="hljs-symbol">machine:</span>~/<span class="hljs-title class_">MyShell</span><span class="hljs-variable">$ </span>echo <span class="hljs-variable">$name</span><br>feng<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
